from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager

{% for model in models %}
from routes.{{ model.snake }} import router as {{ model.snake }}_router
import models.{{ model.snake }}
{% endfor %}

@asynccontextmanager
async def lifespan(app: FastAPI):
    print("ðŸš€ FastAPI app is starting up...")
    yield
    print("ðŸ›‘ FastAPI app is shutting down...")

app = FastAPI(
    title="Generated FastAPI App",
    description="This app was generated automatically from an OpenAPI spec.",
    version="1.0.0",
    lifespan=lifespan
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

{% for model in models %}
app.include_router({{ model.snake }}_router, prefix="/{{ model.plural }}", tags=["{{ model.name }}"])
{% endfor %}

@app.get("/")
def read_root():
    return {"message": "Welcome to the Generated FastAPI API!"}
