#!/usr/bin/env python3
"""
Updated generate_main.py - Now fully dynamic
Works with any OpenAPI YAML file
"""

import os
import yaml
from jinja2 import Template
from logger import logger

def get_existing_files(directory):
    """Get list of existing Python files in a directory"""
    if not os.path.exists(directory):
        logger.warning(f"Directory {directory} doesn't exist")
        return []
    
    files = []
    for file in os.listdir(directory):
        if file.endswith('.py') and file != '__init__.py':
            files.append(file[:-3])  # Remove .py extension
    
    return files

def extract_app_metadata(spec):
    """Extract app metadata from OpenAPI spec"""
    info = spec.get("info", {})
    
    return {
        "title": info.get("title", "Generated FastAPI App"),
        "description": info.get("description", "This app was generated automatically from an OpenAPI spec."),
        "version": info.get("version", "1.0.0")
    }

def generate_router_data(existing_routes, existing_models):
    """Generate router data for template"""
    router_data = []
    
    for route in existing_routes:
        # Only include routes that have corresponding models
        if route in existing_models:
            # Convert route name to proper format
            router_name = route.replace('-', '_').lower()
            tag_name = route.replace('_', '').replace('-', '').title()
            
            # Handle plural prefixes intelligently
            if route.endswith('s'):
                prefix = route  # already plural
            elif route.endswith('y'):
                prefix = route[:-1] + 'ies'  # category -> categories
            else:
                prefix = route + 's'  # pet -> pets
            
            router_data.append({
                'file_name': route,
                'router_name': router_name,
                'tag_name': tag_name,
                'prefix': prefix
            })
        else:
            logger.warning(f"Route {route} exists but no corresponding model found")
    
    return router_data

def generate_main_py(openapi_file="openapi3.yaml"):
    """Generate dynamic main.py based on existing files"""
    
    logger.info("🔄 Generating dynamic main.py...")
    
    # Load OpenAPI spec for metadata
    app_metadata = {"title": "Generated FastAPI App", "description": "Auto-generated API", "version": "1.0.0"}
    try:
        with open(openapi_file, "r") as f:
            spec = yaml.safe_load(f)
        app_metadata = extract_app_metadata(spec)
        logger.info(f"✅ Loaded metadata from {openapi_file}")
    except Exception as e:
        logger.warning(f"Could not load {openapi_file}: {e}. Using defaults.")
    
    # Get existing files
    existing_routes = get_existing_files("routes")
    existing_models = get_existing_files("models")
    
    logger.info(f"📁 Found {len(existing_routes)} route files: {existing_routes}")
    logger.info(f"📁 Found {len(existing_models)} model files: {existing_models}")
    
    # Generate router data
    router_data = generate_router_data(existing_routes, existing_models)
    
    if not router_data:
        logger.warning("⚠️ No matching route/model pairs found!")
        return []
    
    # Main.py template
    main_template = Template('''from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# 🤖 Auto-generated imports - DO NOT EDIT MANUALLY
{% for router in routers %}
from routes.{{ router.file_name }} import router as {{ router.router_name }}_router
import models.{{ router.file_name }}
{% endfor %}

app = FastAPI(
    title="{{ app.title }}",
    description="{{ app.description }}",
    version="{{ app.version }}"
)

# ✅ CORS Configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure this for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# 🚀 Dynamic Router Registration
{% for router in routers %}
app.include_router(
    {{ router.router_name }}_router, 
    prefix="/{{ router.prefix }}", 
    tags=["{{ router.tag_name }}"]
)
{% endfor %}

@app.on_event("startup")
async def startup_event():
    print("🚀 FastAPI app is starting up...")
    print("📊 Registered {{ routers|length }} routers")

@app.on_event("shutdown")
async def shutdown_event():
    print("🛑 FastAPI app is shutting down...")

@app.get("/")
def read_root():
    return {
        "message": "Welcome to {{ app.title }}!",
        "version": "{{ app.version }}",
        "routers": {{ routers|length }},
        "endpoints": [
            {% for router in routers %}
            "/{{ router.prefix }}"{% if not loop.last %},{% endif %}
            {% endfor %}
        ]
    }

@app.get("/health")
def health_check():
    return {"status": "healthy", "routers": {{ routers|length }}}
''')
    
    # Render template
    main_content = main_template.render(
        routers=router_data,
        app=app_metadata
    )
    
    # Write main.py
    with open("main.py", "w") as f:
        f.write(main_content)
    
    logger.info(f"✅ Generated main.py with {len(router_data)} routers")
    
    # Log summary
    for router in router_data:
        logger.info(f"   📍 /{router['prefix']} -> {router['file_name']}")
    
    return router_data

if __name__ == "__main__":
    routers = generate_main_py()
    
    if routers:
        print("✅ Dynamic main.py generated successfully!")
        print(f"📊 Registered {len(routers)} routers")
        
        print("\n📍 Available endpoints:")
        for router in routers:
            print(f"   /{router['prefix']} -> routes/{router['file_name']}.py")
    else:
        print("⚠️ No routers found. Make sure you have generated routes and models first.")